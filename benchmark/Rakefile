require 'bundler/setup'

SCALES = [1000, 10000]
if ENV['LIMIT']
  LIMITS = [Integer(ENV['LIMIT'])]
else
  LIMITS = SCALES.product([1, 2, 3, 5]).map {|a, b| a * b }
end

if RUBY_PLATFORM.match?(/darwin/)
  # Setting appropriate DYLD_LIBRARY_PATH for child processes
  libdirs = ['arrow', 'arrow-glib'].map { |libname|
    `pkg-config --variable=libdir #{libname}`.chomp
  }.uniq
  ENV['DYLD_LIBRARY_PATH'] = libdirs.join(':')
end

namespace :benchmark do
  desc 'Run time benchmark'
  task :time do
    LIMITS.each do |limit|
      ENV['LIMIT'] = limit.to_s
      puts "LIMIT=#{limit} BATCH_SIZE=#{ENV['BATCH_SIZE'] || 0} TIMESTAMP=#{Time.now.strftime('%Y%m%d%H%M%S')}"
      sh "benchmark-driver", "--bundler", "-r", "time", "-o", "simple", "driver.yml"
    end
  end

  desc 'Run memory benchmark'
  task :memory do
    LIMITS.each do |limit|
      ENV['LIMIT'] = limit.to_s
      puts "LIMIT=#{limit} BATCH_SIZE=#{ENV['BATCH_SIZE'] || 0} TIMESTAMP=#{Time.now.strftime('%Y%m%d%H%M%S')}"
      sh "benchmark-driver", "--bundler", "-r", "memory", "-o", "simple", "driver.yml"
    end
  end

  namespace :mt do
    desc 'Run time benchmark with multiple threads'
    task :time do
      LIMITS.each do |limit|
        ENV['LIMIT'] = limit.to_s
        puts "LIMIT=#{limit} BATCH_SIZE=#{ENV['BATCH_SIZE'] || 0} TIMESTAMP=#{Time.now.strftime('%Y%m%d%H%M%S')} MT"
        sh "benchmark-driver", "--bundler", "-r", "time", "-o", "simple", "driver-mt.yml"
      end
    end

    desc 'Run memory benchmark with multiple threads'
    task :memory do
      LIMITS.each do |limit|
        ENV['LIMIT'] = limit.to_s
        puts "LIMIT=#{limit} BATCH_SIZE=#{ENV['BATCH_SIZE'] || 0} TIMESTAMP=#{Time.now.strftime('%Y%m%d%H%M%S')} MT"
        sh "benchmark-driver", "--bundler", "-r", "memory", "-o", "simple", "driver-mt.yml"
      end
    end
  end
end

desc 'Run benchmark'
task :benchmark => 'benchmark:time'
task :benchmark => 'benchmark:memory'
